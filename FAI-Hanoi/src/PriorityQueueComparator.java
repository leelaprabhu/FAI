import java.util.Comparator;

public class PriorityQueueComparator implements Comparator<Node>{
	private Node dest;
	private int noDisc;
	double c[][]={
			{1,2,2,1,1,3,1,3,3},{1,2,3,1,3,0,3,2,3},{0,0,2,1,0,0,0,0,0},{3,2,0,0,0,0,0,0,0},{2,3,0,1,0,0,0,0,0},{0,1,0,0,1,1,3,3,3},{1,1,3,3,0,0,1,0,2},{3,2,3,1,1,2,1,1,3},{1,2,3,1,0,0,0,0,0},{2,0,3,3,0,0,3,3,3},{2,2,3,3,3,2,3,2,3},{3,3,0,2,3,3,3,1,1},{1,1,1,0,3,3,2,2,3},{1,1,1,2,3,3,3,3,3},{0,2,1,0,0,0,1,3,3},{1,2,2,1,3,1,1,3,3},{0,2,3,2,1,2,0,1,2},{0,3,3,1,2,2,2,2,3},{0,1,3,3,1,3,2,0,3},{1,3,3,2,1,1,1,3,3},{1,0,2,1,2,2,0,1,2},{0,2,2,1,2,2,0,3,3},{1,1,3,0,1,1,0,3,3},{3,0,1,3,2,1,3,2,3},{0,2,0,0,2,2,3,3,2},{2,0,0,1,0,1,2,3,3},{1,1,2,3,3,2,3,3,3},{2,0,1,3,1,0,1,3,3},{3,3,0,0,3,0,0,3,3},{3,2,3,0,2,0,1,3,3},{0,0,1,2,2,3,2,0,0},{2,1,1,2,1,3,3,3,3},{2,3,1,1,3,0,0,3,1},{0,1,0,3,0,0,0,0,0},{1,2,0,3,3,2,3,1,3},{0,3,3,1,1,0,3,3,3},{0,1,2,3,2,1,3,2,3},{1,3,2,0,0,1,3,1,2},{3,0,1,0,1,2,0,2,3},{3,1,2,3,0,2,0,3,3},{3,3,0,3,3,2,0,3,3},{3,0,1,1,2,1,1,2,3},{0,2,3,3,3,1,3,1,0},{3,1,1,0,3,0,3,3,3},{0,0,1,2,1,1,1,3,1},{0,0,3,0,0,0,0,0,0},{2,0,0,3,3,3,3,2,3},{2,2,0,1,3,3,3,3,3},{1,3,3,1,2,2,1,3,2},{3,1,0,2,1,0,3,3,3},{2,0,3,0,3,3,3,3,3},{0,3,1,2,2,1,3,3,3},{1,0,0,1,3,3,3,3,3},{1,1,0,1,3,2,3,3,3},{0,2,2,0,3,2,3,3,3},{3,1,2,1,1,0,2,0,2},{0,1,1,3,1,3,1,2,0},{2,3,1,1,1,0,1,3,3},{3,0,1,0,0,0,3,3,3},{1,1,1,2,3,0,1,2,1},{3,2,2,1,0,0,0,0,0},{0,2,1,2,3,3,2,3,0},{1,0,0,0,3,0,3,3,1},{3,1,1,1,0,2,3,0,0},{0,1,2,2,0,3,3,3,3},{2,1,3,1,2,0,3,2,3},{0,3,3,0,3,2,3,2,3},{0,0,0,3,3,3,1,3,3},{3,2,2,3,0,2,3,3,3},{1,3,3,2,3,1,3,3,3},{2,0,1,0,3,3,3,3,3},{1,0,2,2,1,1,2,3,3},{2,1,1,3,1,2,3,2,1},{1,0,3,2,0,3,3,3,3},{1,0,2,3,0,3,0,2,3},{3,0,1,2,2,2,2,3,3},{2,3,1,3,3,3,3,3,3},{0,3,3,1,1,0,3,2,2},{0,2,2,1,2,0,3,0,0},{2,3,3,0,1,2,3,3,3},{1,3,2,3,1,3,1,2,1},{3,2,0,3,3,1,0,1,0},{1,0,0,1,2,3,3,1,2},{2,1,2,2,3,2,1,3,3},{1,0,3,3,1,1,0,3,3},{2,0,1,1,3,3,1,3,3},{3,0,1,3,3,2,3,3,3},{3,2,0,0,2,1,2,1,0},{1,2,2,1,0,0,0,0,0},{2,3,3,0,0,3,0,3,3},{1,2,2,0,0,0,0,0,0},{1,1,1,0,0,0,0,0,0},{0,0,0,0,1,2,2,3,3},{3,1,3,3,2,2,1,3,0},{1,3,1,3,1,0,1,0,3},{1,2,2,2,2,2,3,3,0},{1,1,3,0,1,2,3,2,3},{3,0,0,3,3,2,0,1,0},{2,0,0,2,0,2,1,3,3},{3,0,0,1,2,3,3,3,3},{1,0,3,0,2,3,3,3,3},{2,2,2,3,0,0,0,0,0},{2,2,2,2,2,2,3,0,2},{3,1,3,1,1,3,2,2,3},{2,1,1,2,1,1,2,0,3},{3,3,3,1,2,0,1,3,3},{2,0,0,2,3,3,2,3,3},{1,0,3,1,1,0,3,3,3},{3,1,2,1,2,1,2,3,3},{3,3,3,0,1,1,1,3,3},{2,3,3,1,1,2,2,3,3},{1,1,0,0,0,2,0,3,3},{3,2,3,2,3,3,3,3,3},{0,1,3,1,0,3,3,2,3},{2,2,0,0,3,1,3,3,3},{0,0,1,1,3,3,3,3,3},{0,0,2,0,0,0,1,3,3},{2,3,1,1,3,2,2,0,3},{2,3,0,3,3,0,2,3,3},{0,3,1,3,0,0,3,3,3},{0,3,0,2,1,0,0,3,3},{2,1,1,0,3,3,3,2,3},{2,2,3,1,3,2,3,3,3},{1,3,0,0,1,2,1,3,2},{3,0,2,2,2,1,2,3,3},{0,2,1,1,0,3,1,0,3},{2,3,3,3,2,2,0,2,1},{2,0,1,1,3,0,0,3,3},{3,2,0,0,2,0,0,0,1},{3,0,3,3,3,3,3,3,3},{1,1,0,1,0,0,0,0,0},{0,3,2,1,3,3,3,3,3},{1,3,3,0,1,0,3,3,3},{1,3,1,2,1,3,3,3,3},{3,1,2,2,2,2,3,3,3},{3,0,2,3,2,0,3,3,3},{1,0,0,2,3,3,3,3,3},{3,1,2,3,2,3,3,3,3},{0,0,2,2,2,0,3,3,3},{1,0,1,1,3,3,3,3,3},{3,0,0,3,0,2,3,3,3},{2,1,1,3,1,0,3,2,3},{0,2,0,0,0,0,0,0,0},{3,2,0,1,2,1,0,3,3},{1,1,3,3,0,3,0,0,2},{2,2,2,2,3,2,3,0,0},{2,0,2,1,2,1,1,3,3},{3,2,2,0,3,3,3,3,3},{3,0,2,0,2,0,0,0,0},{2,0,3,3,2,0,3,3,3},{0,3,1,1,3,0,1,3,3},{0,0,3,0,1,1,0,0,3},{0,0,0,2,1,1,3,0,3},{2,3,1,2,3,1,3,3,3},{0,1,2,2,0,2,0,3,3},{2,1,1,3,3,0,1,3,3},{1,3,3,0,1,0,2,3,2},{1,2,1,3,2,3,3,3,3},{3,1,0,2,2,2,2,1,0},{2,1,3,2,1,0,3,3,3},{2,0,3,1,1,1,3,1,2},{1,0,3,2,3,3,1,3,3},{2,2,2,3,3,0,3,3,3},{3,0,2,0,1,0,2,3,3},{1,2,3,3,1,2,3,2,3},{0,3,1,2,3,0,3,2,3},{1,1,3,3,2,1,1,3,3},{0,3,2,0,3,1,0,1,1},{2,2,3,1,3,2,0,3,3},{2,1,1,1,0,0,0,0,0},{1,3,3,1,3,2,3,3,3},{3,3,0,2,1,0,1,1,3},{3,1,3,0,3,3,3,3,3},{0,3,1,3,3,3,3,3,3},{0,3,1,1,1,2,3,3,3},{2,2,3,2,2,0,1,3,3},{1,0,2,0,2,3,0,3,3},{1,0,1,1,2,0,3,0,0},{0,2,1,0,2,0,3,2,3},{2,2,3,1,3,1,3,1,3},{2,3,3,1,3,3,2,2,3},{0,3,0,0,1,2,3,2,3},{0,2,3,3,0,0,0,0,0},{3,2,1,3,3,2,2,2,3},{1,1,1,3,2,1,3,1,2},{1,0,3,1,1,3,0,1,1},{3,2,2,0,0,0,1,3,3},{0,0,1,0,3,3,3,3,3},{1,2,2,0,1,0,3,3,3},{2,1,3,2,3,3,3,3,3},{1,3,0,1,3,3,1,2,3},{3,1,0,0,0,1,0,3,3},{1,3,3,3,0,3,3,3,3},{2,1,0,1,3,2,2,2,0},{2,1,3,3,0,0,0,0,0},{1,3,2,3,2,3,1,1,2},{2,2,2,0,2,0,1,3,1},{2,1,3,3,1,1,1,3,3},{3,0,0,1,2,2,0,3,3},{2,1,0,3,0,3,0,3,3},{1,1,3,3,1,1,0,2,0},{0,3,2,2,3,3,1,2,3},{3,0,1,3,3,3,0,2,1},{1,0,3,3,3,3,3,3,3},{2,1,0,1,0,1,3,0,0},{2,0,0,2,3,3,1,0,0},{1,3,1,1,0,3,3,0,3},{0,3,3,3,2,1,3,3,0},{3,2,0,0,3,2,0,1,3},{2,1,3,1,2,2,3,1,0},{2,1,0,1,2,3,3,0,3},{2,2,3,2,0,2,0,3,1},{0,1,0,3,2,2,0,0,2},{2,1,0,2,2,2,3,2,3},{1,0,2,2,3,1,1,3,3},{0,3,2,2,0,3,3,3,3},{2,0,0,1,1,3,0,3,3},{1,3,3,1,1,2,3,3,3},{0,3,2,1,2,2,0,3,3},{2,2,0,0,2,1,3,2,3},{0,1,0,0,2,3,0,3,3},{1,3,1,3,1,1,0,2,0},{0,2,1,0,1,3,1,2,2},{2,0,0,1,3,3,3,3,3},{1,2,2,3,0,2,3,3,3},{3,0,2,2,2,3,2,2,3},{3,1,2,0,0,0,0,0,0},{3,1,1,0,0,0,3,3,3},{3,0,1,2,1,2,3,3,2},{3,1,0,1,1,2,1,3,3},{3,3,3,2,2,2,0,3,3},{0,1,0,1,3,1,3,3,3},{2,2,2,2,1,0,3,3,3},{2,2,1,2,1,3,3,3,3},{3,0,3,2,3,1,0,3,3},{2,0,1,2,0,1,2,3,2},{0,3,2,3,1,0,2,3,3},{3,3,1,1,1,3,2,2,3},{2,3,1,2,1,0,1,3,3},{1,0,3,0,1,3,2,3,3},{2,3,1,1,1,0,0,3,3},{3,1,1,1,3,1,3,2,3},{2,0,1,0,1,2,3,1,1},{0,1,2,2,1,2,2,3,3},{3,2,0,0,2,2,0,1,0},{2,0,0,2,3,3,1,3,3},{2,2,3,3,0,3,1,2,2},{0,3,3,1,2,2,2,3,3},{0,3,0,1,0,0,0,0,0},{1,2,3,1,1,2,1,2,2},{0,2,0,3,3,3,3,2,3},{0,2,2,3,0,1,3,1,2},{0,2,2,3,2,3,1,3,3},{2,3,0,0,2,3,0,3,2},{0,1,2,1,0,0,0,0,0},{2,2,0,2,3,3,0,3,3},{0,3,3,2,1,1,2,0,1},{3,3,3,1,3,1,0,3,3},{0,1,2,2,1,2,3,2,3},{2,2,0,3,3,2,2,2,3},{2,3,2,2,2,2,1,3,3},{0,2,0,2,0,0,0,0,0},{3,3,3,2,1,0,0,3,3},{1,2,2,3,3,2,3,2,3},{2,1,2,0,1,1,3,2,3},{3,3,3,2,1,3,3,3,3},{0,1,2,1,2,2,2,2,3},{3,0,2,1,1,3,3,3,3},{0,1,1,2,2,2,3,2,3},{0,1,2,3,0,0,0,0,0},{2,1,3,2,0,0,0,0,0},{1,3,1,2,3,3,3,2,3},{1,3,3,2,0,0,1,1,3},{1,0,1,3,3,0,2,3,3},{1,0,2,1,1,2,3,2,3},{3,3,0,2,0,0,3,2,3},{0,3,1,3,3,2,3,3,3},{0,2,0,2,3,2,3,3,3},{1,2,3,3,1,3,1,0,1},{3,0,0,0,3,3,0,3,3},{1,1,1,2,1,2,2,2,1},{3,1,3,2,2,2,1,3,3},{3,2,3,3,2,2,3,2,3},{3,0,1,3,3,3,3,2,3},{0,1,3,0,0,0,2,2,3},{1,2,0,2,3,2,3,3,3},{2,1,2,3,1,2,3,3,3},{3,2,1,2,0,1,3,3,3},{1,3,0,0,3,1,2,2,1},{0,0,3,2,2,3,1,3,3},{0,0,0,3,0,0,3,2,3},{0,0,3,2,3,3,3,2,0},{3,2,0,0,0,3,0,1,3},{3,1,0,3,3,3,3,3,3},{2,3,3,2,3,3,1,3,1},{2,2,0,2,0,0,0,0,0},{1,3,1,0,0,2,2,3,3},{0,0,3,2,2,3,1,1,2},{0,1,3,3,3,3,2,1,0},{0,1,2,2,1,1,1,2,2}
	};
	double lambda[]={35.165,-40.49,70.777,95.376,-30.515,-55.143,-113.71,24.202,22.732,-0.32472,89.802,-42.823,43.238,-235.41,-47.989,-27.94,0.53807,177.73,101.81,9.7218,-181.22,26.066,-23.842,69.339,126.47,18.097,-42.058,18.826,281.59,-81.103,52.336,-7.7281,-13.951,43.107,148.36,-3.6912,71.216,-158.59,101.11,-49.829,-78.898,96.753,-10.271,-70.668,146.95,-11.492,140.81,-178.56,146.24,-86.031,55.928,-47.177,87.824,150.55,-23.551,-178.09,49.007,-70.565,10.062,11.725,-22.823,129.37,53.024,53.341,-138.95,142.16,122.93,-18.564,56.132,-49.353,-119.9,10.41,177.07,34.786,59.196,48.087,-215.65,-33.581,-17.24,-78.237,153.19,-15.041,-69.495,-69.094,-111.77,44.583,-131.59,-9.5911,-26.004,-14.703,42.783,-39.105,-20.193,32.908,-13.142,207.82,25.769,17.188,-121.9,3.2788,-226.66,-4.391,-216.79,37.966,-84.277,31.816,367.26,-179.29,-19.294,115.15,159.47,-44.251,-86.916,0.23739,-101.22,11.129,-73.061,-117.8,13.267,-198.91,65.353,231.99,14.181,4.8387,5.5566,-46.935,91.103,-57.06,-100.49,-123.79,0.79123,-282.62,-99.307,-14.65,136.3,-114.03,-297.97,-95.09,-60.477,160.05,-22.082,109.8,38.632,-162.67,-78.145,40.257,133.02,-67.489,59.132,125.63,-12.746,81.873,-25.758,36.441,41.226,-37.523,47.752,116.7,9.4667,-0.70988,2.2121,107.68,-167.6,-24.838,107.97,85.182,3.7592,-4.099,-87.596,-22.592,13.269,-4.1033,-50.476,-435.01,35.708,-14.717,-115.87,15.256,-32.046,31.845,10.21,-34.893,2.9093,184.69,-291.99,1.9392,-80.473,-139.02,206.67,-8.3858,40.848,18.538,-28.5,33.491,80.937,-232.85,7.236,95.544,-201.34,75.918,-10.711,260.25,-57.256,-138.94,-51.481,-81.423,151.84,14.59,-28.52,-39.224,-27.175,63.068,-84.901,113.18,-39.828,-37.552,88.524,-142.37,-255.56,31.136,52.434,-108.03,-44.709,-207.26,65.055,113.4,31.956,16.34,28.346,17.235,-47.33,-53.553,-111.12,-17.965,79.297,7.8252,45.35,60.765,23.434,256.53,-10.948,92.061,33.758,4.7501,0.49594,-158.88,-55.151,-22.008,51.648,-305.27,134.65,27.348,-18.703,-43.861,-57.736,197.59,13.807,8.8983,91.813,36.531,-61.607,-57.424,-38.089,105.23,41.581,-58.195,70.909,-162.28,87.671,54.697,-24.334,330.82,128.26,106.81,16.858,172.05,193.51,-85.7,-23.457,126.98,-169.1,-79.123,252.68,235.26,134.79,5.5582,-184.94,-96.719,-56.779,31.941,73.968,210.86,-25.782,-244.02,108.17,75.43,92.194,62.152,-356.91,-43.211};
	double sig= 5.5678;
	public PriorityQueueComparator(Node dest, int noDisc){
		this.dest=dest;
		this.noDisc=noDisc;
	}
	
	double iw[][]={
		{-0.41795,-0.63063,-0.70016,-0.19178,0.13098,0.51306,0.10357,-1.6203,-0.16248},
		{0.028855,-0.15222,-0.19396,0.019698,0.43476,0.80796,0.81204,0.60308,-0.069103},
		{-0.1146,0.069635,-0.074686,-0.090929,-0.045199,0.027017,0.0041096,-0.13661,1.3081},
		{-0.017601,-0.033123,-0.063916,-0.0021219,0.053593,0.075844,0.27563,1.5987,1.108},
		{-0.587,-0.34742,0.012916,0.39918,-0.13549,1.4994,1.0277,1.0053,-2.456},
		{0.63033,1.4295,-0.85222,0.4424,0.19697,1.2003,0.97845,0.2053,0.025123},
		{1.1502,-1.9007,0.86836,-0.89872,-0.062283,1.719,-2.0073,0.36942,0.62731},
		{0.85714,-0.85362,0.84252,0.014011,-2.5788,-0.67352,0.29452,-0.59074,2.2228},
		{-0.32812,-0.21302,-0.26742,-0.050798,0.057523,0.054359,-0.38506,-0.78343,0.64511},
		{-1.0081,-0.32717,0.92605,0.61811,0.40341,0.84279,-0.9263,1.0272,-1.1593},
		{0.11343,-0.066391,-0.025102,-0.016722,-0.81217,-0.30559,-0.38507,0.57937,-0.92507},
		{-0.072045,0.34464,0.40769,0.050819,-0.37969,-1.1219,-0.69171,-1.2119,0.65682},
		{0.13761,0.11728,0.029292,-0.071585,-0.49748,0.36093,0.095643,0.47351,-1.5615},
		{-1.468,0.17943,1.186,0.87083,0.77307,0.92702,-0.13843,0.014467,0.42621},
		{1.2398,-0.73936,-0.077172,-1.0922,0.031376,-0.31131,-0.37599,-1.0963,-0.60218},
		{-0.92649,0.034193,-1.3279,-1.988,0.19301,-1.1229,1.5099,0.33215,1.3084},
		{0.13165,-0.52079,-1.7028,-0.88902,-0.91221,-1.4261,0.84318,1.451,1.5977},
		{0.16079,0.23499,-0.044521,-0.33142,0.034809,0.40654,-0.013316,-0.68563,1.6662},
		{-0.40948,-0.38778,1.2742,-0.14704,0.64992,-0.98327,-0.89115,0.60217,0.20281},
		{0.41441,0.8937,-0.6627,2.0664,0.22579,0.15353,-1.994,0.35531,0.25255}
	};
	
	double lw[]={-5.1539,1.6042,-2.0813,-8.4752,-0.91484,-0.10515,-0.11076,-0.42867,0.9733,-0.12704,0.99648,1.0824,1.3731,0.045444,0.1077,0.22735,-0.23687,-1.1906,0.34332,0.37954};
	double b1[]={-1.7912,-3.6599,-2.5276,-8.3438,-1.1174,-3.2032,-1.1336,-3.8405,2.5178,-0.093645,-0.0051407,2.7065,2.355,1.0142,0.027675,-0.42805,0.39774,-2.7353,1.1429,-1.1754};
	double b2=10.755;
	
	private double neuralNet(int[] state){
		double y1[]= new double[b1.length];
		for (int i=0; i<b1.length; i++){
			y1[i]= Math.tanh(crossProduct(iw[i],state)+b1[i]);
		}
		double y2= crossProduct(lw,y1)+b2;	
		return y2;
	}
	
	public double rbfCalc(int[] state){
		double u[]= new double[lambda.length];
		for(int j=0; j<lambda.length; j++){
			u[j]= Math.exp(-norm(state,c[j])/(sig*sig));
		}
		double cost = crossProduct(lambda,u);
		return cost;
	}
	
	private double norm(int[] state, double[] ds) {
		double normRet=0;
		for(int i=0;i<noDisc;i++){
			normRet=normRet+(state[i]-ds[i])*(state[i]-ds[i]);
		}
		return Math.sqrt(normRet);
	}

	private double crossProduct(double[] lambda, double[] u) {
		double prod=0.0;
		for (int i=0; i<lambda.length; i++){
			prod=prod+ lambda[i]*u[i];
		}
		return prod;
	}
	
	private double crossProduct(double[] lambda, int[] u) {
		double prod=0.0;
		for (int i=0; i<lambda.length; i++){
			prod=prod+ lambda[i]*u[i];
		}
		return prod;
	}

	public int compare(Node a, Node b) {
		//int costA= heuristicIncorrect(a,dest)+a.getDepth();
		//int costB= heuristicIncorrect(b,dest)+b.getDepth();
		//int costA= (int) (rbfCalc(a.getState())+a.getDepth());
		//int costB= (int) (rbfCalc(b.getState())+b.getDepth());
		double costA= (neuralNet(a.getState())+a.getDepth());
		double costB= (neuralNet(b.getState())+b.getDepth());
		if(costA<costB)
			return -1;
		else if(costA>costB)
			return 1;
		else
			return 0;
	}
	
	public int heuristicIncorrect(Node check, Node dest){
		int cost=0;
		for(int i=0; i<noDisc; i++){
			if(dest.getState()[i]!=check.getState()[i]){
				cost++;
			}
		}
		return cost;
	}

}
